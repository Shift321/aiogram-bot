from datetime import datetime, date, timedelta

from database.db import session
from models.models import User, Menu, Washes, Wishes, Payments, Cleaning, Food, FeedBack
from utils.utils import make_state, check_week_day


async def register(message, bot):
    text = message.text.split()
    if len(text) != 4:
        await bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    else:
        if text[2] != "ColibringLiver":
            await bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        else:
            user = User(telegram_id=message.chat.id, name=text[0], room_number=text[1],
                        birth=datetime.strptime(text[3], "%d.%m.%Y").date())
            session.add(user)
            session.commit()
            await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {text[0]}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üòÅ")
            make_state(message.chat.id, "start")


async def admin(message, bot):
    tg_id = message.chat.id
    user = session.query(User).filter(User.telegram_id == tg_id).one()
    if message.text == "CollibringCool":
        user.is_admin = True
        session.flush()
        session.commit()
        await bot.send_message(tg_id, "–¢–µ–ø–µ—Ä—å —Ç—ã –∞–¥–º–∏–Ω –ø–æ–∑–¥—Ä–∞–≤–ª—è—é –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π –≤–ª–∞—Å—Ç—å—éü´°")
        make_state(message.chat.id, "start")
    else:
        await bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


async def food(message, bot):
    user = session.query(User).filter(User.telegram_id == message.chat.id).one()
    user.food = message.text
    session.flush()
    session.commit()
    await bot.send_message(message.chat.id, "–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ –∑–∞–ø–∏—Å–∞–Ω—ãüçï")

    make_state(message.chat.id, "start")


async def post_menu(message, bot):
    menu = session.query(Menu).all()
    if len(menu) == 0:
        menu = Menu(menu_text=message.text)
        session.add(menu)
        session.commit()
    else:
        menu[0].menu_text = message.text
        session.flush()
        session.commit()
    users = session.query(User).all()
    for user in users:
        await bot.send_message(user.telegram_id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø–∏—à–∏—Å—å –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ!")
    make_state(message.chat.id, "start")
    await bot.send_message(message.chat.id, "–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æü•ò")


async def time_to_pay_handler(message, bot):
    payers = message.text.split(" ")
    if len(payers) == 4:
        date_recieved = payers[1]
        date_of_pay = date_recieved + ".23"
        date_of_pay_obj = datetime.strptime(date_of_pay, '%d.%m.%y').date()
        users = session.query(User).filter(User.room_number == payers[0], User.name == payers[3]).all()
        sum_of_pay = payers[2]
        if len(users) == 0:
            await bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —é–∑–µ—Ä —á—Ç–æ —Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫(")
        else:
            for user in users:
                payment = Payments(date_of_payment=date_of_pay_obj, user_id=user.id, sum_of_pay=sum_of_pay)
                session.add(payment)
                session.commit()
                session.flush()
            await bot.send_message(message.chat.id, "—É—Å–ø–µ—Ö")
    else:
        date_recieved = payers[1]
        date_of_pay = date_recieved + ".23"
        date_of_pay_obj = datetime.strptime(date_of_pay, '%d.%m.%y').date()
        users = session.query(User).filter(User.room_number == payers[0]).all()
        sum_of_pay = payers[2]
        if len(users) == 0:
            await bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —é–∑–µ—Ä —á—Ç–æ —Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫(")
        else:
            for user in users:
                payment = Payments(date_of_payment=date_of_pay_obj, user_id=user.id, sum_of_pay=sum_of_pay)
                session.add(payment)
                session.commit()
                session.flush()
            await bot.send_message(message.chat.id, "—É—Å–ø–µ—Ö")


async def wash_clothes_handler(message, bot):
    time = message.text.split("-")
    format_ok = True
    try:
        time_start = datetime.strptime(time[0], '%H:%M').time()
        time_end = datetime.strptime(time[1], '%H:%M').time()
    except:
        format_ok = False
        await bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
    if format_ok:
        if time_start > time_end:
            await bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        else:
            user = session.query(User).filter(User.telegram_id == message.chat.id).one()
            can_add_up = 0
            can_add_down = 0
            all_washes = session.query(Washes).filter(Washes.date == date.today()).all()
            if len(all_washes) == 0:
                wash = Washes(time_start=time_start, time_end=time_end, date=date.today(),
                              name=user.name)
                session.add(wash)
                session.commit()
                await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")

                make_state(message.chat.id, "start")
            else:
                for wash in all_washes:
                    if time_start <= wash.time_start and time_start <= wash.time_end and time_end <= wash.time_start and time_end <= wash.time_end:
                        can_add_up += 1
                    if time_start >= wash.time_start and time_start >= wash.time_end and time_end >= wash.time_start and time_end >= wash.time_end:
                        can_add_down += 1
                result = can_add_up + can_add_down
                if can_add_up == len(all_washes) or can_add_down == len(all_washes) or result == len(all_washes):
                    wash = Washes(time_start=time_start, time_end=time_end, date=date.today(),
                                  name=user.name)
                    session.add(wash)
                    session.commit()
                    await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
                    make_state(message.chat.id, "start")
                else:
                    await bot.send_message(message.chat.id, "–î–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è")


async def want_to_add_wish(message, bot):
    user = session.query(User).filter(User.telegram_id == message.chat.id).one()
    wish = Wishes(name_of_user=user.name, text=message.text)
    session.add(wish)
    session.commit()
    await bot.send_message(message.chat.id, "–í–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!")

    make_state(message.chat.id, "start")


async def list_of_wish():
    wishes = session.query(Wishes).all()
    text = ""
    for wish in wishes:
        text += f"–ò–º—è :{wish.name_of_user}, –ü–æ–∂–µ–ª–∞–Ω–∏–µ: {wish.text}" + "\n"
    return text


async def delete_user_handler(message, bot):
    text = message.text.split()
    user_to_delete = session.query(User).filter(User.name == text[0]).filter(User.room_number == text[1]).all()
    if len(user_to_delete) != 0:
        session.delete(user_to_delete[0])
        session.commit()
        await bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        make_state(message.chat.id, "start")
    else:
        await bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")


async def add_cleaning_handler(message, bot):
    # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 203,204,205; –≤—Ç–æ—Ä–Ω–∏–∫ 101,102,103;
    cleaning_days = message.text.split(";")
    for one_cleaning in cleaning_days:
        text = one_cleaning.split()
        week_day = text[0]
        room_number = text[1]
        cleaning = session.query(Cleaning).filter(Cleaning.week_day == week_day.lower()).all()
        if len(cleaning) == 0:
            new_cleaning = Cleaning(week_day=week_day.lower(), room_number=room_number)
            session.add(new_cleaning)
            session.commit()
        else:
            cleaning[0].room_number = room_number
            session.flush()
            session.commit()
    await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")


async def when_to_eat_handler(message, bot):
    days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    meals = ['–∑–∞–≤—Ç—Ä–∞–∫', '–æ–±–µ–¥']
    text = message.text.replace(":", "")
    when_to_eat = text.split(",")
    user = session.query(User).filter(User.telegram_id == message.chat.id).one()
    for i in when_to_eat:
        day = i.split()

        if day[0].lower() not in days:
            print(day[0].lower())
            print("wrong day")
            await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ {day[0].lower()}")
            return
        if len(day) == 3:
            if day[1] not in meals:
                print("wrong –∑–∞–≤—Ç—Ä–∞–∫")
                await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ {day[1]}")
                return
            if day[2] not in meals:
                print("wrong –æ–±—ç–¥")
                await bot.send_message(message.chat.id, f"–æ—à–∏–±–∫–∞ –≤ —Å–ª–æ–≤–µ {day[1]}")
                return
        if len(day) == 2:
            if day[1] not in meals:
                print("wrong –∑–∞–≤—Ç—Ä–∞–∫ –∏–ª–∏ –æ–±—ç–¥")
                await bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                return
        lens = [3, 2]
        if len(day) not in lens:
            print("wrong len")
            await bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
    user = session.query(User).filter(User.telegram_id == message.chat.id).one()
    all_eat = session.query(Food).filter(Food.user_id == user.id).all()
    if len(all_eat) != 0:
        for i in all_eat:
            session.delete(i)
            session.commit()
    for day in when_to_eat:
        day = day.split()

        if len(day) == 3:
            check_eat = session.query(Food).filter(Food.user_id == user.id,
                                                   Food.name_of_week_day == day[0].lower()).all()
            if len(check_eat) != 0:
                check_eat[0].breakfast = True
                check_eat[0].dinner = True
                session.commit()
            else:
                eat = Food(name_of_week_day=day[0].lower(), user_id=user.id, breakfast=True,
                           dinner=True)
                session.add(eat)
                session.commit()
        else:
            if day[1].upper() == "–ó–ê–í–¢–†–ê–ö":
                check_eat = session.query(Food).filter(Food.user_id == user.id,
                                                       Food.name_of_week_day == day[0].lower()).all()
                if len(check_eat) != 0:
                    check_eat[0].breakfast = True
                    session.commit()
                else:
                    eat = Food(name_of_week_day=day[0].lower(), user_id=user.id, breakfast=True)
                    session.add(eat)
                    session.commit()
            if day[1].upper() == "–û–ë–ï–î":
                check_eat = session.query(Food).filter(Food.user_id == user.id,
                                                       Food.name_of_week_day == day[0].lower()).all()
                if len(check_eat) != 0:
                    check_eat[0].breakfast = True
                    session.commit()
                else:
                    eat = Food(name_of_week_day=day[0].lower(), user_id=user.id, dinner=True)
                    session.add(eat)
                    session.commit()
    await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")


async def change_text_cleaning_handler(message, bot):
    user = session.query(User).filter(User.telegram_id == message.chat.id).one()
    user.cleaning_prefers = message.text
    session.flush()
    session.commit()
    await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ –í–∞—à–∞ –ø—Ä–æ—Å—å–±–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")


async def get_feed_back_handler(message, bot):
    text = message.text
    feed_back = FeedBack(chat_id=message.chat.id, text=text)
    session.add(feed_back)
    session.commit()
    await bot.send_message(message.chat.id, "–í–∞—à —Ñ–∏–¥–±—ç–∫ –∑–∞–ø–∏—Å–∞–Ω")


async def show_who_eating_for_week_handler():
    text_to_send = "–ü–∏—Ç–∞—é—â–∏–µ—Å—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    monday_breakfast_counter = 0
    monday_dinner_counter = 0
    monday_text = f"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n\n"
    tueday_breakfast_counter = 0
    tueday_dinner_counter = 0
    tueday_text = f"–í—Ç–æ—Ä–Ω–∏–∫:\n\n"
    wednsedey_breakfast_counter = 0
    wednsedey_dinner_counter = 0
    wednsedey_text = f"–°—Ä–µ–¥–∞:\n\n"
    thurdsday_breakfast_counter = 0
    thurdsday_dinner_counter = 0
    thurdsday_text = f"–ß–µ—Ç–≤–µ—Ä–≥:\n\n"
    friday_breakfast_counter = 0
    friday_dinner_counter = 0
    friday_text = f"–ü—è—Ç–Ω–∏—Ü–∞:\n\n"
    saturday_breakfast_counter = 0
    saturday_dinner_counter = 0
    saturday_text = f"–°—É–±–±–æ—Ç–∞:\n\n"
    sunday_breakfast_counter = 0
    sunday_dinner_counter = 0
    sunday_text = f"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:\n\n"
    empty = ""
    breakfast = "–∑–∞–≤—Ç—Ä–∞–∫"
    dinner = "–æ–±–µ–¥"
    all_food = session.query(Food).all()
    for i in all_food:
        if i.name_of_week_day == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
            if i.breakfast == True:
                monday_breakfast_counter += 1
            if i.dinner == True:
                monday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            monday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "–≤—Ç–æ—Ä–Ω–∏–∫":
            if i.breakfast == True:
                tueday_breakfast_counter += 1
            if i.dinner == True:
                tueday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            tueday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "—Å—Ä–µ–¥–∞":
            if i.breakfast == True:
                wednsedey_breakfast_counter += 1
            if i.dinner == True:
                wednsedey_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            wednsedey_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "—á–µ—Ç–≤–µ—Ä–≥":
            if i.breakfast == True:
                thurdsday_breakfast_counter += 1
            if i.dinner == True:
                thurdsday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            thurdsday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "–ø—è—Ç–Ω–∏—Ü–∞":
            if i.breakfast == True:
                friday_breakfast_counter += 1
            if i.dinner == True:
                friday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            friday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "—Å—É–±–±–æ—Ç–∞":
            if i.breakfast == True:
                saturday_breakfast_counter += 1
            if i.dinner == True:
                saturday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            saturday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
        if i.name_of_week_day == "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
            if i.breakfast == True:
                sunday_breakfast_counter += 1
            if i.dinner == True:
                sunday_dinner_counter += 1
            user = session.query(User).filter(User.id == i.user_id).one()
            sunday_text += f"–ò–º—è:{user.name},{breakfast if i.breakfast == True else empty} {dinner if i.dinner == True else empty}\n"
    monday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{monday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{monday_dinner_counter}\n\n"
    tueday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{tueday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{tueday_dinner_counter}\n\n"
    wednsedey_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{wednsedey_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{wednsedey_dinner_counter}\n\n"
    thurdsday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{thurdsday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{thurdsday_dinner_counter}\n\n"
    friday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{friday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{friday_dinner_counter}\n\n"
    saturday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{saturday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{saturday_dinner_counter}\n\n"
    sunday_counter = f"\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤—Ç—Ä–∞–∫–æ–≤:{sunday_breakfast_counter}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–µ–¥–æ–≤:{sunday_dinner_counter}\n\n"
    text_to_send += monday_text + monday_counter + "\n" + tueday_text + tueday_counter + "\n" + wednsedey_text + wednsedey_counter + "\n" + thurdsday_text + thurdsday_counter + "\n" + friday_text + friday_counter + "\n" + saturday_text + saturday_counter + "\n" + sunday_text + sunday_counter

    return text_to_send


async def birth_insert_handler(message, bot):
    try:
        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        user = session.query(User).filter(User.telegram_id == message.chat.id).one()
        user.birth = date_obj
        session.flush()
        session.commit()
        await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ)")
    except:
        await bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
