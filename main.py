from datetime import date
import datetime
from aiogram import Bot, executor, Dispatcher
from aiogram.types import Message

from database.db import Base, engine, session
from handlers.handlers import register, admin, food, post_menu, time_to_pay_handler, wash_clothes_handler, \
    want_to_add_wish, list_of_wish, delete_user_handler, add_cleaning_handler, when_to_eat_handler, \
    change_text_cleaning_handler, get_feed_back_handler, show_who_eating_for_week_handler

from models.models import User, Menu, Washes, Food, State, Cleaning, FeedBack
from utils.messages import messages, command_list, admin_command_list, meal_text
from utils.utils import logging_tg, is_register, check_week_day, make_state

bot = Bot("5888170225:AAEN6YCV3hBD6G54Kb9tHuDeRajpY_Uicug")
dispatcher = Dispatcher(bot)
Base.metadata.create_all(engine)


@dispatcher.message_handler(commands=['start'])
async def hello(message: Message):
    logging_tg(message.chat.id, message)
    make_state(message.chat.id, "start")
    await bot.send_message(message.chat.id, messages["hello_message_collibring"])
    await bot.send_message(message.chat.id, command_list)


@dispatcher.message_handler(commands=['send_message_to_all'])
async def send_to_all(message: Message):
    all_eat = session.query(Food).all()
    for i in all_eat:
        user = session.query(User.id == i.user_id).all()
        await bot.send_message(user[0].telegram_id,
                               "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–∑–∞–ø–∏—à–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –ø–∏—Ç–∞–Ω–µ–∏–µ —è –ø—Ä–æ–∏–∑–≤–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã ,—Ç–µ–ø–µ—Ä—å –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Ö–æ—Ä–æ—à–æ –∫–æ–º–∞–Ω–¥–∞ /meal. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –±–æ—Ç –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –≥–æ—Ç–æ–≤–æ –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å—é–¥–∞ @shift123(–°–∞—à–∞)")
    await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")


@dispatcher.message_handler(commands=['meal'])
async def when_to_eat(message: Message):
    logging_tg(message.chat.id, message)
    make_state(message.chat.id, "meal")
    await bot.send_message(message.chat.id, meal_text)


@dispatcher.message_handler(commands=['pay'])
async def pay(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        make_state(message.chat.id, "pay")
        await bot.send_message(message.chat.id,
                               "–û–ø–ª–∞—Ç—É –∑–∞ –∂–∏–ª—å—ë, –ø–∏—Ç–∞–Ω–∏–µ, —Ä–∞–∑–±–∏—Ç—É—é –ø–æ—Å—É–¥—É –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ —Å—á—ë—Ç—É GE40BG0000000537661778 Daria Marshalkina")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['show_users'])
async def show_users(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        if not user[0].is_admin:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
        else:
            users = session.query(User).order_by("room_number").all()
            text = ""
            for user in users:
                text += f"–∫–æ–º–Ω–∞—Ç–∞:{user.room_number} –ò–º—è:{user.name}\n"
            await bot.send_message(message.chat.id, text)


@dispatcher.message_handler(commands=['add_cleaning'])
async def add_cleaning(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        user = session.query(User).filter(User.telegram_id == message.chat.id, User.is_admin == True).all()
        if len(user) != 0:
            await bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è —É–±–æ—Ä–∫–∏")
            make_state(message.chat.id, "add_cleaning")
        else:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['show_cleaning'])
async def show_cleanings(message: Message):
    logging_tg(message.chat.id, message)
    now_day = datetime.date.today() + datetime.timedelta(days=1)
    weekday = now_day.strftime("%A")
    if is_register(message):
        cleanings = session.query(Cleaning).filter(Cleaning.week_day == check_week_day(weekday)).all()
        text_to_send = "–ü—Ä–æ—Å—å–±—ã –æ–± —É–±–æ—Ä–∫–µ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        if len(cleanings) == 0:
            text_to_send = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —É–±–æ—Ä–æ–∫"
        else:
            for cleaning in cleanings:
                for room_number in cleaning.room_number.split(","):
                    users = session.query(User).filter(User.room_number == room_number).all()
                    for i in users:
                        if i.cleaning_prefers is not None:
                            text_to_send += f"–ö–æ–º–Ω–∞—Ç–∞: {room_number} –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:{i.cleaning_prefers}\n"
                            break
                        else:
                            text_to_send += f"–ö–æ–º–Ω–∞—Ç–∞: {room_number} –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ—Ç\n"
        await bot.send_message(message.chat.id, text_to_send)
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['/unadmin'])
async def un_admin(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        user[0].is_admin = False
        session.flush()
        session.commit()
        await bot.send_message(message.chat.id, "unadmined")


@dispatcher.message_handler(commands=['delete_user'])
async def delete_user(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        if user[0].is_admin:
            make_state(message.chat.id, "delete_user")
            await bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —é–∑–µ—Ä–∞ ,–∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        else:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")


@dispatcher.message_handler(commands=['wash_clothes'])
async def wash_clothes(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        make_state(message.chat.id, "wash_cloth")
        washes = session.query(Washes).filter(Washes.date == date.today()).order_by('time_start')
        text = ""
        for wash in washes:
            time_start = str(wash.time_start)[:5]
            time_end = str(wash.time_end)[:5]
            text += f"{wash.name} {time_start}-{time_end} –î–ê–¢–ê –°–¢–ò–†–ö–ò:{wash.date}" + "\n"
        text += "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π —Å—Ç–∏—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 15:00-16:00 "
        await bot.send_message(message.chat.id, text)
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['admin'])
async def become_admin(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        make_state(message.chat.id, "admin")
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å , –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –î–∞—à–∏ü§î")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['commands'])
async def become_admin(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, command_list)
    else:
        if user[0].is_admin:
            await bot.send_message(message.chat.id, admin_command_list)
        else:
            await bot.send_message(message.chat.id, command_list)


@dispatcher.message_handler(commands=['register'])
async def register_user(message: Message):
    logging_tg(message.chat.id, message)
    if not is_register(message):

        make_state(message.chat.id, "register")
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ c–≤–æ—ë –∏–º—è, –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!üòº")
    else:
        await bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!üòº")


@dispatcher.message_handler(commands=['food'])
async def food_hate(message: Message):
    logging_tg(message.chat.id, message)
    make_state(message.chat.id, "food")
    if is_register(message):
        await bot.send_message(message.chat.id,
                               "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç—ã –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å, –∞ –∫–∞–∫–∏–µ –±–ª—é–¥–∞ –ª—é–±–∏—à—å, –∏ –º—ã —É—á—Ç—ë–º —ç—Ç–æ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é ü•∞")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['menu'])
async def menu(message: Message):
    logging_tg(message.chat.id, message)
    menu = session.query(Menu).all()
    if is_register(message):
        if len(menu) == 0:
            await bot.send_message(message.chat.id, "–ú–µ–Ω—é –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç")
        else:
            await bot.send_message(message.chat.id, menu[0].menu_text)
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['post_menu'])
async def menu(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        if not user[0].is_admin:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
        else:
            make_state(message.chat.id, "post_menu")
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—éüçî")


@dispatcher.message_handler(commands=['time_to_pay'])
async def time_to_pay(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) == 0:
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        if not user[0].is_admin:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
        else:
            make_state(message.chat.id, "time_to_pay")
            await bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –¥–∞—Ç—É —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –Ω–∞–ø—Ä–∏–º–µ—Ä (203 11.02 50) –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤—Å–µ –∂–∏–≤—É—â–∏–µ –≤ 203 –Ω–æ–º–µ—Ä–µ –ø–æ–ª—É—á–∞—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∏–ª–∏ (203 11.02 50 –°–∞—à–∞) –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç —Ç–æ–ª—å–∫–æ –°–∞—à–∞ –∏–∑ 203")


@dispatcher.message_handler(commands=['add_wish'])
async def want_to_add(message: Message):
    logging_tg(message.chat.id, message)
    if not is_register(message):
        await bot.send_message(message.chat.id, messages['not_registered'])
    else:
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞–º!")
        make_state(message.chat.id, "want_to_add")


@dispatcher.message_handler(commands=['show_wishes'])
async def show_wish(message: Message):
    logging_tg(message.chat.id, message)
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if len(user) != 0:
        if user[0].is_admin == True:
            await bot.send_message(message.chat.id, await list_of_wish())
        else:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å—è!")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['what_close'])
async def what_close(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, messages['what_close'])
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['events'])
async def events(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, messages['events'])
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['show_feed_backs'])
async def show_feed_back(message: Message):
    user = session.query(User).filter(User.telegram_id == message.chat.id).all()
    if is_register(message):
        user = session.query(User).filter(User.telegram_id == message.chat.id).one()
        if user.is_admin:
            feed_backs = session.query(FeedBack).all()
            text_to_send = ""
            for i in feed_backs:
                user = session.query(User).filter(User.telegram_id == i.chat_id).one()
                text_to_send += f"{user.name} {user.room_number} —Ñ–∏–¥–±—ç–∫:{i.text}\n"
            await bot.send_message(message.chat.id, text_to_send)
        else:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['dogs'])
async def dogs(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, messages['dogs'])
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['what_about_food'])
async def what_about_food(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, messages['what_about_food'])
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['kitchen'])
async def kitchen(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, "https://t.me/c/1638911958/27")
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['cool_guys'])
async def services(message: Message):
    logging_tg(message.chat.id, message)
    if is_register(message):
        await bot.send_message(message.chat.id, messages['price_of_all'])
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['show_who_eating'])
async def show_who_eating(message: Message):
    if is_register(message):
        user = session.query(User).filter(User.is_admin == True, User.telegram_id == message.chat.id).all()
        if len(user) == 0:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
        else:
            logging_tg(message.chat.id, message)
            today = datetime.datetime.now().date()
            weekday = today.strftime("%A")
            rus_week_day = check_week_day(weekday)
            eat = session.query(Food).filter(Food.name_of_week_day == rus_week_day, Food.breakfast == True).all()
            message_to_send_breakfast = f"–ö—Ç–æ –µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤—Ç—Ä–∞–∫ :\n\n{len(eat)} –ø–æ—Ä—Ü–∏–π\n\n"
            for i in eat:
                user = session.query(User).filter(User.id == i.user_id).one()
                if not user.food:
                    message_to_send_breakfast += f"{user.name} {user.room_number}\n"
                else:
                    message_to_send_breakfast += f"{user.name} {user.room_number} –Ω–µ –µ—Å—Ç {user.food}\n"

            eat_dinner = session.query(Food).filter(Food.name_of_week_day == rus_week_day, Food.dinner == True).all()
            message_to_send_dinner = f"\n\n–ö—Ç–æ –µ—Å—Ç —Å–µ–≥–æ–¥–Ω—è –æ–±–µ–¥ : \n\n{len(eat_dinner)} –ø–æ—Ä—Ü–∏–π\n\n"
            for i in eat_dinner:
                user = session.query(User).filter(User.id == i.user_id).one()
                if not user.food:
                    message_to_send_dinner += f"{user.name} {user.room_number}\n"
                else:
                    message_to_send_dinner += f"{user.name} {user.room_number} –Ω–µ –µ—Å—Ç {user.food}\n"
            message_to_send = message_to_send_breakfast + message_to_send_dinner
            await bot.send_message(message.chat.id, message_to_send)
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler(commands=['show_who_eating_for_week'])
async def show_who_eating_for_week(message: Message):
    if is_register(message):
        user = session.query(User).filter(User.is_admin == True, User.telegram_id == message.chat.id).all()
        if len(user) == 0:
            await bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—é–¥–∞ –Ω–µ–ª—å–∑—è üßê")
        else:
            await bot.send_message(message.chat.id, await show_who_eating_for_week_handler())
    else:
        await bot.send_message(message.chat.id, messages['not_registered'])


@dispatcher.message_handler()
async def add_user(message: Message):
    user_state = session.query(State).filter(State.chat_id == message.chat.id).all()
    if user_state == 0:
        state = State(chat_id=message.chat.id, state="start")
        session.add(state)
        session.commit()
    else:
        if user_state[0].state == "get_feedback":
            await get_feed_back_handler(message, bot)
        if user_state[0].state == "meal":
            await when_to_eat_handler(message, bot)
        if user_state[0].state == "add_cleaning":
            await add_cleaning_handler(message, bot)
        if user_state[0].state == "added_cleaning":
            await change_text_cleaning_handler(message, bot)
        if user_state[0].state == "register":
            await register(message, bot)
        if user_state[0].state == "admin":
            await admin(message, bot)
        if user_state[0].state == "food":
            await food(message, bot)
        if user_state[0].state == "post_menu":
            await post_menu(message, bot)
        if user_state[0].state == "time_to_pay":
            await time_to_pay_handler(message, bot)
        if user_state[0].state == "wash_cloth":
            await wash_clothes_handler(message, bot)
        if user_state[0].state == "want_to_add":
            await want_to_add_wish(message, bot)
        if user_state[0].state == "delete_user":
            await delete_user_handler(message, bot)


executor.start_polling(dispatcher)
